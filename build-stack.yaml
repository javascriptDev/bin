configs:
  logging:
    content: |-
      loglevel.controller: info
        loglevel.creds-init: info
        loglevel.git-init: info
        loglevel.webhook: info
        zap-logger-config: |
          {
            "level": "info",
            "development": false,
            "sampling": {
              "initial": 100,
              "thereafter": 100
            },
            "outputPaths": ["stdout"],
            "errorOutputPaths": ["stderr"],
            "encoding": "json",
            "encoderConfig": {
              "timeKey": "",
              "levelKey": "level",
              "nameKey": "logger",
              "callerKey": "caller",
              "messageKey": "msg",
              "stacktraceKey": "stacktrace",
              "lineEnding": "",
              "levelEncoder": "",
              "timeEncoder": "",
              "durationEncoder": "",
              "callerEncoder": ""
            }
          }

services:
  buildkit:
    maxScale: 10
    minScale: 1
    concurrency: 5
    ports:
    - 9001/tcp,buildkit,internal=true
    systemSpec:
      podSpec:
        containers:
        - image: moby/buildkit:v0.3.3
          args:
          - --addr
          - tcp://0.0.0.0:9001
          name: buildkitd
          ports:
          - containerPort: 9001
          securityContext:
            privileged: true
  registry:
    image: registry:2
    env:
    - REGISTRY_HTTP_ADDR=0.0.0.0:80
    ports:
    - 80:80/tcp,registry
    volumes:
    - storage-registry:/var/lib/registry
  webhook:
    global_permissions:
    - "* gitwatcher.cattle.io/gitwatchers"
    - "* gitwatcher.cattle.io/gitcommits"
    - '* configmaps'
    - '* events'
    - secrets
    image: rancher/gitwatcher:v0.2.2
    args:
    - gitwatcher
    - --listen-address
    - :8090
    imagePullPolicy: always
    ports:
    - 8090/tcp,http-webhookinator
  build-controller:
    global_permissions:
    - '* pods'
    - '* namespaces'
    - '* secrets'
    - '* events'
    - '* serviceaccounts'
    - '* configmaps'
    - '* extentions/deployments'
    - 'create,get,list,watch,patch,update,delete build.knative.dev/builds'
    - 'create,get,list,watch,patch,update,delete build.knative.dev/builds/status'
    - 'create,get,list,watch,patch,update,delete build.knative.dev/buildtemplates'
    - 'create,get,list,watch,patch,update,delete build.knative.dev/clusterbuildtemplates'
    - '* caching.internal.knative.dev/images'
    - '* apiextensions.k8s.io/customresourcedefinitions'
    image: addisonjoe/knative
    configs:
    - logging/content:/etc/config-logging
    env:
    - SYSTEM_NAMESPACE=${NAMESPACE}
    args:
    - -logtostderr
    - -stderrthreshold
    - INFO
    - -creds-image
    - addisonjoe/creds-init
    - -git-image
    - addisonjoe/git-init
    - -nop-image
    - addisonjoe/nop


kubernetes:
  manifest: |-
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      labels:
        knative.dev/crd-install: "true"
      name: builds.build.knative.dev
    spec:
      additionalPrinterColumns:
      - JSONPath: .status.conditions[?(@.type=="Succeeded")].status
        name: Succeeded
        type: string
      - JSONPath: .status.conditions[?(@.type=="Succeeded")].reason
        name: Reason
        type: string
      - JSONPath: .status.startTime
        name: StartTime
        type: date
      - JSONPath: .status.completionTime
        name: CompletionTime
        type: date
      group: build.knative.dev
      names:
        categories:
        - all
        - knative
        kind: Build
        plural: builds
      scope: Namespaced
      subresources:
        status: {}
      version: v1alpha1
    ---
    apiVersion: caching.internal.knative.dev/v1alpha1
    kind: Image
    metadata:
      name: creds-init
      namespace: ${NAMESPACE}
    spec:
      image: addisonjoe/creds-init
    ---
    apiVersion: caching.internal.knative.dev/v1alpha1
    kind: Image
    metadata:
      name: git-init
      namespace: ${NAMESPACE}
    spec:
      image: addisonjoe/git-init
    ---
    apiVersion: caching.internal.knative.dev/v1alpha1
    kind: Image
    metadata:
      name: gcs-fetcher
      namespace: ${NAMESPACE}
    spec:
      image: gcr.io/cloud-builders/gcs-fetcher
    ---
    apiVersion: caching.internal.knative.dev/v1alpha1
    kind: Image
    metadata:
      name: nop
      namespace: ${NAMESPACE}
    spec:
      image: addisonjoe/nop
    ---
    apiVersion: build.knative.dev/v1alpha1
    kind: ClusterBuildTemplate
    metadata:
      name: buildkit
    spec:
      parameters:
      - name: IMAGE
        description: Where to publish the resulting image
      - name: DOCKERFILE
        description: The name of the Dockerfile
        default: "Dockerfile"
      - name: PUSH
        description: Whether push or not
        default: "true"
      - name: DIRECTORY
        description: The directory containing the app
        default: "/workspace"
      - name: BUILDKIT_CLIENT_IMAGE
        description: The name of the BuildKit client (buildctl) image
        default: "moby/buildkit:v0.3.1-rootless@sha256:2407cc7f24e154a7b699979c7ced886805cac67920169dcebcca9166493ee2b6"
      - name: BUILDKIT_DAEMON_ADDRESS
        description: The address of the BuildKit daemon (buildkitd) service
        default: "tcp://buildkitd:1234"
      steps:
      - name: build-and-push
        image: $${BUILDKIT_CLIENT_IMAGE}
        workingDir: $${DIRECTORY}
        command: ["buildctl", "--addr=$${BUILDKIT_DAEMON_ADDRESS}", "build",
                  "--progress=plain",
                  "--exporter-opt=registry.insecure=true",
                  "--frontend=dockerfile.v0",
                  "--frontend-opt", "filename=$${DOCKERFILE}",
                  "--local", "context=.", "--local", "dockerfile=.",
                  "--exporter=image", "--exporter-opt", "name=$${IMAGE}", "--exporter-opt", "push=$${PUSH}"]
